type Category {
    id: ID!
    name: String!
    user: User! @belongsTo
    created_at: DateTimeTz!
    updated_at: DateTimeTz!
}

input CreateCategoryInput {
    name: String!
}

input UpdateCategoryInput {
    name: String!
}

extend type Query {
    categories(orderBy: _ @orderBy(columns: ["created_at", "name"])): [Category!] @all(scopes: ["byLoggedInUser"]) @guard(with: ["api", "web"])
    category(id: ID! @eq): Category! @find @can(ability: "view", find: "id") @guard(with: ["api", "web"])
}

extend type Mutation {
    createCategory(input: CreateCategoryInput! @spread): Category @create @inject(context: "user.id", name: "user_id") @guard(with: ["api", "web"])
    updateCategory(id: ID!, input: UpdateCategoryInput! @spread): Category @update @can(ability: "update", find: "id") @guard(with: ["api", "web"])
    deleteCategory(id: ID!): Category @delete @can(ability: "delete", find: "id") @guard(with: ["api", "web"])
}
